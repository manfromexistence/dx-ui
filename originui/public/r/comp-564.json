{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-564",
  "type": "registry:component",
  "registryDependencies": [
    "https://originui.com/r/cropper.json"
  ],
  "files": [
    {
      "path": "registry/default/components/comp-564.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useEffect, useState } from \"react\"\n\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  Cropper,\n  CropperCropArea,\n  CropperDescription,\n  CropperImage,\n} from \"@/registry/default/ui/cropper\"\n\n// Define type for pixel crop area\ntype Area = { x: number; y: number; width: number; height: number }\n\n// --- Start: Copied Helper Functions ---\nconst createImage = (url: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener(\"load\", () => resolve(image))\n    image.addEventListener(\"error\", (error) => reject(error))\n    image.setAttribute(\"crossOrigin\", \"anonymous\") // Needed for canvas Tainted check\n    image.src = url\n  })\n\nasync function getCroppedImg(\n  imageSrc: string,\n  pixelCrop: Area,\n  outputWidth: number = pixelCrop.width, // Optional: specify output size\n  outputHeight: number = pixelCrop.height\n): Promise<Blob | null> {\n  try {\n    const image = await createImage(imageSrc)\n    const canvas = document.createElement(\"canvas\")\n    const ctx = canvas.getContext(\"2d\")\n\n    if (!ctx) {\n      return null\n    }\n\n    // Set canvas size to desired output size\n    canvas.width = outputWidth\n    canvas.height = outputHeight\n\n    // Draw the cropped image onto the canvas\n    ctx.drawImage(\n      image,\n      pixelCrop.x,\n      pixelCrop.y,\n      pixelCrop.width,\n      pixelCrop.height,\n      0,\n      0,\n      outputWidth, // Draw onto the output size\n      outputHeight\n    )\n\n    // Convert canvas to blob\n    return new Promise((resolve) => {\n      canvas.toBlob((blob) => {\n        resolve(blob)\n      }, \"image/jpeg\") // Specify format and quality if needed\n    })\n  } catch (error) {\n    console.error(\"Error in getCroppedImg:\", error)\n    return null\n  }\n}\n// --- End: Copied Helper Functions ---\n\nconst ORIGINAL_IMAGE_URL =\n  \"https://raw.githubusercontent.com/origin-space/origin-images/refs/heads/main/cropper-10_k24zxk.jpg\"\n\nexport default function Component() {\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<Area | null>(null)\n  const [croppedImageUrl, setCroppedImageUrl] = useState<string | null>(null)\n\n  // Callback to update crop area state\n  const handleCropChange = useCallback((pixels: Area | null) => {\n    setCroppedAreaPixels(pixels)\n  }, [])\n\n  // Function to handle the crop button click\n  const handleCrop = async () => {\n    if (!croppedAreaPixels) {\n      console.error(\"No crop area selected.\")\n      return\n    }\n\n    try {\n      const croppedBlob = await getCroppedImg(\n        ORIGINAL_IMAGE_URL,\n        croppedAreaPixels\n      )\n      if (!croppedBlob) {\n        throw new Error(\"Failed to generate cropped image blob.\")\n      }\n\n      // Create a new object URL\n      const newCroppedUrl = URL.createObjectURL(croppedBlob)\n\n      // Revoke the old URL if it exists\n      if (croppedImageUrl) {\n        URL.revokeObjectURL(croppedImageUrl)\n      }\n\n      // Set the new URL\n      setCroppedImageUrl(newCroppedUrl)\n    } catch (error) {\n      console.error(\"Error during cropping:\", error)\n      // Optionally: Clear the old image URL on error\n      if (croppedImageUrl) {\n        URL.revokeObjectURL(croppedImageUrl)\n      }\n      setCroppedImageUrl(null)\n    }\n  }\n\n  // Effect for cleaning up the object URL\n  useEffect(() => {\n    // This is the cleanup function that runs when the component unmounts\n    // or when croppedImageUrl changes before the next effect runs.\n    const currentUrl = croppedImageUrl\n    return () => {\n      if (currentUrl && currentUrl.startsWith(\"blob:\")) {\n        URL.revokeObjectURL(currentUrl)\n        console.log(\"Revoked URL:\", currentUrl) // Optional: for debugging\n      }\n    }\n  }, [croppedImageUrl]) // Dependency array ensures cleanup runs when URL changes\n\n  return (\n    <div className=\"flex flex-col items-center gap-2\">\n      <div className=\"flex w-full flex-col gap-4 md:flex-row\">\n        <Cropper\n          className=\"h-64 md:flex-1\"\n          image={ORIGINAL_IMAGE_URL}\n          onCropChange={handleCropChange}\n        >\n          <CropperDescription />\n          <CropperImage />\n          <CropperCropArea />\n        </Cropper>\n        <div className=\"flex w-26 flex-col gap-4\">\n          <Button onClick={handleCrop} disabled={!croppedAreaPixels}>\n            Crop preview\n          </Button>\n          {/* Display Area */}\n          <div className=\"aspect-square w-full shrink-0 overflow-hidden rounded-lg border\">\n            {croppedImageUrl ? (\n              <img\n                src={croppedImageUrl}\n                alt=\"Cropped result\"\n                className=\"h-full w-full object-cover\"\n              />\n            ) : (\n              <div className=\"bg-muted text-muted-foreground/80 flex h-full w-full items-center justify-center p-2 text-center text-xs\">\n                Image preview\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <p\n        aria-live=\"polite\"\n        role=\"region\"\n        className=\"text-muted-foreground mt-2 text-xs\"\n      >\n        Cropper with image preview âˆ™{\" \"}\n        <a\n          href=\"https://github.com/origin-space/image-cropper\"\n          className=\"hover:text-foreground underline\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          API\n        </a>\n      </p>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "image",
      "crop",
      "zoom"
    ],
    "colSpan": 2
  }
}