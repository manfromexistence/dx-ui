{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-575",
  "type": "registry:component",
  "registryDependencies": [
    "https://originui.com/r/tree.json"
  ],
  "files": [
    {
      "path": "registry/default/components/comp-575.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\"\nimport {\n  createOnDropHandler,\n  dragAndDropFeature,\n  hotkeysCoreFeature,\n  keyboardDragAndDropFeature,\n  selectionFeature,\n  syncDataLoaderFeature,\n} from \"@headless-tree/core\"\nimport { AssistiveTreeDescription, useTree } from \"@headless-tree/react\"\nimport {\n  RiBracesLine,\n  RiCodeSSlashLine,\n  RiFileLine,\n  RiFileTextLine,\n  RiImageLine,\n  RiReactjsLine,\n} from \"@remixicon/react\"\n\nimport { Tree, TreeItem, TreeItemLabel } from \"@/registry/default/ui/tree\"\n\ninterface Item {\n  name: string\n  children?: string[]\n  fileExtension?: string\n}\n\nconst initialItems: Record<string, Item> = {\n  app: {\n    name: \"app\",\n    children: [\"app/layout.tsx\", \"app/page.tsx\", \"app/(dashboard)\", \"app/api\"],\n  },\n  \"app/layout.tsx\": { name: \"layout.tsx\", fileExtension: \"tsx\" },\n  \"app/page.tsx\": { name: \"page.tsx\", fileExtension: \"tsx\" },\n  \"app/(dashboard)\": {\n    name: \"(dashboard)\",\n    children: [\"app/(dashboard)/dashboard\"],\n  },\n  \"app/(dashboard)/dashboard\": {\n    name: \"dashboard\",\n    children: [\"app/(dashboard)/dashboard/page.tsx\"],\n  },\n  \"app/(dashboard)/dashboard/page.tsx\": {\n    name: \"page.tsx\",\n    fileExtension: \"tsx\",\n  },\n  \"app/api\": { name: \"api\", children: [\"app/api/hello\"] },\n  \"app/api/hello\": { name: \"hello\", children: [\"app/api/hello/route.ts\"] },\n  \"app/api/hello/route.ts\": { name: \"route.ts\", fileExtension: \"ts\" },\n  components: {\n    name: \"components\",\n    children: [\"components/button.tsx\", \"components/card.tsx\"],\n  },\n  \"components/button.tsx\": { name: \"button.tsx\", fileExtension: \"tsx\" },\n  \"components/card.tsx\": { name: \"card.tsx\", fileExtension: \"tsx\" },\n  lib: { name: \"lib\", children: [\"lib/utils.ts\"] },\n  \"lib/utils.ts\": { name: \"utils.ts\", fileExtension: \"ts\" },\n  public: {\n    name: \"public\",\n    children: [\"public/favicon.ico\", \"public/vercel.svg\"],\n  },\n  \"public/favicon.ico\": { name: \"favicon.ico\", fileExtension: \"ico\" },\n  \"public/vercel.svg\": { name: \"vercel.svg\", fileExtension: \"svg\" },\n  \"package.json\": { name: \"package.json\", fileExtension: \"json\" },\n  \"tailwind.config.ts\": { name: \"tailwind.config.ts\", fileExtension: \"ts\" },\n  \"tsconfig.json\": { name: \"tsconfig.json\", fileExtension: \"json\" },\n  \"next.config.mjs\": { name: \"next.config.mjs\", fileExtension: \"mjs\" },\n  \"README.md\": { name: \"README.md\", fileExtension: \"md\" },\n  root: {\n    name: \"Project Root\",\n    children: [\n      \"app\",\n      \"components\",\n      \"lib\",\n      \"public\",\n      \"package.json\",\n      \"tailwind.config.ts\",\n      \"tsconfig.json\",\n      \"next.config.mjs\",\n      \"README.md\",\n    ],\n  },\n}\n\n// Helper function to get icon based on file extension\nfunction getFileIcon(extension: string | undefined, className: string) {\n  switch (extension) {\n    case \"tsx\":\n    case \"jsx\":\n      return <RiReactjsLine className={className} />\n    case \"ts\":\n    case \"js\":\n    case \"mjs\":\n      return <RiCodeSSlashLine className={className} />\n    case \"json\":\n      return <RiBracesLine className={className} />\n    case \"svg\":\n    case \"ico\":\n    case \"png\":\n    case \"jpg\":\n      return <RiImageLine className={className} />\n    case \"md\":\n      return <RiFileTextLine className={className} />\n    default:\n      return <RiFileLine className={className} />\n  }\n}\n\nconst indent = 20\n\nexport default function Component() {\n  const [items, setItems] = useState(initialItems)\n\n  const tree = useTree<Item>({\n    initialState: {\n      expandedItems: [\"app\", \"app/(dashboard)\", \"app/(dashboard)/dashboard\"],\n      selectedItems: [\"components\"],\n    },\n    indent,\n    rootItemId: \"root\",\n    getItemName: (item) => item.getItemData()?.name ?? \"Unknown\",\n    isItemFolder: (item) => (item.getItemData()?.children?.length ?? 0) > 0,\n    canReorder: false,\n    onDrop: createOnDropHandler((parentItem, newChildrenIds) => {\n      setItems((prevItems) => {\n        // Sort the children alphabetically\n        const sortedChildren = [...newChildrenIds].sort((a, b) => {\n          const itemA = prevItems[a]\n          const itemB = prevItems[b]\n\n          // First sort folders before files\n          const isAFolder = (itemA?.children?.length ?? 0) > 0\n          const isBFolder = (itemB?.children?.length ?? 0) > 0\n\n          if (isAFolder && !isBFolder) return -1\n          if (!isAFolder && isBFolder) return 1\n\n          // Then sort alphabetically by name\n          return (itemA?.name ?? \"\").localeCompare(itemB?.name ?? \"\")\n        })\n\n        return {\n          ...prevItems,\n          [parentItem.getId()]: {\n            ...prevItems[parentItem.getId()],\n            children: sortedChildren,\n          },\n        }\n      })\n    }),\n    dataLoader: {\n      getItem: (itemId) => items[itemId],\n      getChildren: (itemId) => items[itemId]?.children ?? [],\n    },\n    features: [\n      syncDataLoaderFeature,\n      selectionFeature,\n      hotkeysCoreFeature,\n      dragAndDropFeature,\n      keyboardDragAndDropFeature,\n    ],\n  })\n\n  return (\n    <div className=\"flex h-full flex-col gap-2 *:first:grow\">\n      <div>\n        <Tree\n          className=\"relative before:absolute before:inset-0 before:-ms-1 before:bg-[repeating-linear-gradient(to_right,transparent_0,transparent_calc(var(--tree-indent)-1px),var(--border)_calc(var(--tree-indent)-1px),var(--border)_calc(var(--tree-indent)))]\"\n          indent={indent}\n          tree={tree}\n        >\n          <AssistiveTreeDescription tree={tree} />\n          {tree.getItems().map((item) => {\n            return (\n              <TreeItem key={item.getId()} item={item} className=\"pb-0!\">\n                <TreeItemLabel className=\"rounded-none py-1\">\n                  <span className=\"flex items-center gap-2\">\n                    {!item.isFolder() &&\n                      getFileIcon(\n                        item.getItemData()?.fileExtension,\n                        \"text-muted-foreground pointer-events-none size-4\"\n                      )}\n                    {item.getItemName()}\n                  </span>\n                </TreeItemLabel>\n              </TreeItem>\n            )\n          })}\n        </Tree>\n      </div>\n\n      <p\n        aria-live=\"polite\"\n        role=\"region\"\n        className=\"text-muted-foreground mt-2 text-xs\"\n      >\n        File editor with drag and drop âˆ™{\" \"}\n        <a\n          href=\"https://headless-tree.lukasbach.com\"\n          className=\"hover:text-foreground underline\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          API\n        </a>\n      </p>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "tree"
    ]
  }
}