{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-576",
  "type": "registry:component",
  "registryDependencies": [
    "https://originui.com/r/tree.json"
  ],
  "files": [
    {
      "path": "registry/default/components/comp-576.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { hotkeysCoreFeature, syncDataLoaderFeature } from \"@headless-tree/core\"\nimport { useTree } from \"@headless-tree/react\"\n\nimport { Tree, TreeItem, TreeItemLabel } from \"@/registry/default/ui/tree\"\n\ninterface Item {\n  name: string\n  href?: string\n  children?: string[]\n  current?: boolean\n}\n\nconst items: Record<string, Item> = {\n  main: { name: \"Documentation\", children: [\"guides\", \"api\", \"resources\"] },\n  guides: { name: \"User Guides\", children: [\"getting-started\", \"advanced\"] },\n  \"getting-started\": {\n    name: \"Getting Started\",\n    children: [\"installation\", \"setup\"],\n  },\n  installation: { name: \"Installation\", href: \"#\", current: true },\n  setup: { name: \"Configuration\", href: \"#\" },\n  advanced: { name: \"Advanced Usage\", href: \"#\" },\n  api: { name: \"API Reference\", children: [\"endpoints\", \"models\"] },\n  endpoints: { name: \"Endpoints\", href: \"#\" },\n  models: { name: \"Data Models\", href: \"#\" },\n  resources: { name: \"Resources\", children: [\"examples\", \"faq\"] },\n  examples: { name: \"Code Examples\", href: \"#\" },\n  faq: { name: \"FAQ\", href: \"#\" },\n}\n\nconst indent = 20\n\n// Find the path from root to the current item\nfunction findPathToCurrent(\n  items: Record<string, Item>,\n  rootId: string\n): string[] {\n  const path: string[] = []\n\n  function findPath(itemId: string): boolean {\n    const item = items[itemId]\n    if (!item) return false\n\n    // If this is the current item, we found the path\n    if (item.current) {\n      path.unshift(itemId)\n      return true\n    }\n\n    // If this item has children, search them\n    if (item.children?.length) {\n      for (const childId of item.children) {\n        if (findPath(childId)) {\n          // If we found the path in this branch, add this item to the path\n          path.unshift(itemId)\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  findPath(rootId)\n  return path\n}\n\n// Get all parent IDs that need to be expanded\nconst pathToCurrent = findPathToCurrent(items, \"main\")\n// Remove the current item from the path if it's a leaf node\nconst expandedItems = pathToCurrent.filter((id) => items[id].children?.length)\n\nexport default function Component() {\n  const tree = useTree<Item>({\n    initialState: {\n      expandedItems,\n    },\n    indent,\n    rootItemId: \"main\",\n    getItemName: (item) => item.getItemData().name,\n    isItemFolder: (item) => (item.getItemData()?.children?.length ?? 0) > 0,\n    dataLoader: {\n      getItem: (itemId) => items[itemId],\n      getChildren: (itemId) => items[itemId].children ?? [],\n    },\n    features: [syncDataLoaderFeature, hotkeysCoreFeature],\n  })\n\n  return (\n    <div className=\"flex h-full flex-col gap-2 *:first:grow\">\n      <Tree indent={indent} tree={tree}>\n        {tree.getItems().map((item) => {\n          return (\n            <TreeItem\n              key={item.getId()}\n              item={item}\n              asChild={!!item.getItemData()?.href}\n            >\n              {item.getItemData()?.href ? (\n                <a\n                  href={item.getItemData().href}\n                  data-current={item.getItemData().current}\n                >\n                  <TreeItemLabel className=\"in-data-[current=true]:bg-accent in-data-[current=true]:text-accent-foreground\" />\n                </a>\n              ) : (\n                <TreeItemLabel />\n              )}\n            </TreeItem>\n          )\n        })}\n      </Tree>\n\n      <p\n        aria-live=\"polite\"\n        role=\"region\"\n        className=\"text-muted-foreground mt-2 text-xs\"\n      >\n        Menu navigation tree âˆ™{\" \"}\n        <a\n          href=\"https://headless-tree.lukasbach.com\"\n          className=\"hover:text-foreground underline\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          API\n        </a>\n      </p>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "tree",
      "menu"
    ]
  }
}