{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-571",
  "type": "registry:component",
  "registryDependencies": [
    "https://originui.com/r/tree.json",
    "https://originui.com/r/input.json"
  ],
  "files": [
    {
      "path": "registry/default/components/comp-571.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\"\nimport {\n  expandAllFeature,\n  hotkeysCoreFeature,\n  searchFeature,\n  selectionFeature,\n  syncDataLoaderFeature,\n  TreeState,\n} from \"@headless-tree/core\"\nimport { useTree } from \"@headless-tree/react\"\nimport { FolderIcon, FolderOpenIcon, SearchIcon } from \"lucide-react\"\n\nimport { Input } from \"@/registry/default/ui/input\"\nimport { Tree, TreeItem, TreeItemLabel } from \"@/registry/default/ui/tree\"\n\ninterface Item {\n  name: string\n  children?: string[]\n}\n\nconst items: Record<string, Item> = {\n  company: {\n    name: \"Company\",\n    children: [\"engineering\", \"marketing\", \"operations\"],\n  },\n  engineering: {\n    name: \"Engineering\",\n    children: [\"frontend\", \"backend\", \"platform-team\"],\n  },\n  frontend: { name: \"Frontend\", children: [\"design-system\", \"web-platform\"] },\n  \"design-system\": {\n    name: \"Design System\",\n    children: [\"components\", \"tokens\", \"guidelines\"],\n  },\n  components: { name: \"Components\" },\n  tokens: { name: \"Tokens\" },\n  guidelines: { name: \"Guidelines\" },\n  \"web-platform\": { name: \"Web Platform\" },\n  backend: { name: \"Backend\", children: [\"apis\", \"infrastructure\"] },\n  apis: { name: \"APIs\" },\n  infrastructure: { name: \"Infrastructure\" },\n  \"platform-team\": { name: \"Platform Team\" },\n  marketing: { name: \"Marketing\", children: [\"content\", \"seo\"] },\n  content: { name: \"Content\" },\n  seo: { name: \"SEO\" },\n  operations: { name: \"Operations\", children: [\"hr\", \"finance\"] },\n  hr: { name: \"HR\" },\n  finance: { name: \"Finance\" },\n}\n\nconst indent = 20\n\nexport default function Component() {\n  // Store the initial expanded items to reset when search is cleared\n  const initialExpandedItems = [\"engineering\", \"frontend\", \"design-system\"]\n  const [state, setState] = useState<Partial<TreeState<Item>>>({})\n\n  const tree = useTree<Item>({\n    state,\n    setState,\n    initialState: {\n      expandedItems: initialExpandedItems,\n    },\n    indent,\n    rootItemId: \"company\",\n    getItemName: (item) => item.getItemData().name,\n    isItemFolder: (item) => (item.getItemData()?.children?.length ?? 0) > 0,\n    dataLoader: {\n      getItem: (itemId) => items[itemId],\n      getChildren: (itemId) => items[itemId].children ?? [],\n    },\n    features: [\n      syncDataLoaderFeature,\n      hotkeysCoreFeature,\n      selectionFeature,\n      searchFeature,\n      expandAllFeature,\n    ],\n  })\n\n  return (\n    <div className=\"flex h-full flex-col gap-2 *:nth-2:grow\">\n      <div className=\"relative\">\n        <Input\n          className=\"peer ps-9\"\n          {...{\n            ...tree.getSearchInputElementProps(),\n            onChange: (e) => {\n              // First call the original onChange handler from getSearchInputElementProps\n              const originalProps = tree.getSearchInputElementProps()\n              if (originalProps.onChange) {\n                originalProps.onChange(e)\n              }\n\n              // Then handle our custom logic\n              const value = e.target.value\n\n              if (value.length > 0) {\n                // If input has at least one character, expand all items\n                tree.expandAll()\n              } else {\n                // If input is cleared, reset to initial expanded state\n                setState((prevState) => {\n                  return {\n                    ...prevState,\n                    expandedItems: initialExpandedItems,\n                  }\n                })\n              }\n            },\n          }}\n          type=\"search\"\n          placeholder=\"Quick search...\"\n        />\n        <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n          <SearchIcon className=\"size-4\" aria-hidden=\"true\" />\n        </div>\n      </div>\n\n      <Tree indent={indent} tree={tree}>\n        {tree.getItems().map((item) => {\n          return (\n            <TreeItem key={item.getId()} item={item}>\n              <TreeItemLabel>\n                <span className=\"flex items-center gap-2\">\n                  {item.isFolder() &&\n                    (item.isExpanded() ? (\n                      <FolderOpenIcon className=\"text-muted-foreground pointer-events-none size-4\" />\n                    ) : (\n                      <FolderIcon className=\"text-muted-foreground pointer-events-none size-4\" />\n                    ))}\n                  {item.getItemName()}\n                </span>\n              </TreeItemLabel>\n            </TreeItem>\n          )\n        })}\n      </Tree>\n\n      <p\n        aria-live=\"polite\"\n        role=\"region\"\n        className=\"text-muted-foreground mt-2 text-xs\"\n      >\n        Tree with search highlight âˆ™{\" \"}\n        <a\n          href=\"https://headless-tree.lukasbach.com\"\n          className=\"hover:text-foreground underline\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          API\n        </a>\n      </p>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "tree",
      "filter",
      "search"
    ]
  }
}